// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeachingRecordSystem.Core.DataStore.Postgres;

#nullable disable

namespace TeachingRecordSystem.Core.DataStore.Postgres.Migrations
{
    [DbContext(typeof(TrsDbContext))]
    [Migration("20240416104642_LastCoreIdentityVc")]
    partial class LastCoreIdentityVc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("application_type");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_type");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("consent_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("display_names");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text")
                        .HasColumnName("json_web_key_set");

                    b.Property<string>("Permissions")
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("Settings")
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pk_oidc_applications");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_oidc_applications_client_id");

                    b.ToTable("oidc_applications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_oidc_authorizations");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_oidc_authorizations_application_id_status_subject_type");

                    b.ToTable("oidc_authorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("display_names");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("text")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pk_oidc_scopes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_oidc_scopes_name");

                    b.ToTable("oidc_scopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<Guid?>("AuthorizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("redemption_date");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reference_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_oidc_tokens");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("ix_oidc_tokens_reference_id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_oidc_tokens_application_id_status_subject_type");

                    b.ToTable("oidc_tokens", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.ApiKey", b =>
                {
                    b.Property<Guid>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("api_key_id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("ApiKeyId")
                        .HasName("pk_api_keys");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("ix_api_keys_application_user_id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_api_keys_key");

                    b.ToTable("api_keys", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.EntityChangesJournal", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("EntityLogicalName")
                        .HasColumnType("text")
                        .HasColumnName("entity_logical_name");

                    b.Property<string>("DataToken")
                        .HasColumnType("text")
                        .HasColumnName("data_token");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<int?>("NextQueryPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("next_query_page_number");

                    b.Property<int?>("NextQueryPageSize")
                        .HasColumnType("integer")
                        .HasColumnName("next_query_page_size");

                    b.Property<string>("NextQueryPagingCookie")
                        .HasColumnType("text")
                        .HasColumnName("next_query_paging_cookie");

                    b.HasKey("Key", "EntityLogicalName")
                        .HasName("pk_entity_changes_journals");

                    b.ToTable("entity_changes_journals", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.Establishment", b =>
                {
                    b.Property<Guid>("EstablishmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("establishment_id");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address3")
                        .UseCollation("case_insensitive");

                    b.Property<string>("County")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("county")
                        .UseCollation("case_insensitive");

                    b.Property<string>("EstablishmentName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("establishment_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("EstablishmentNumber")
                        .HasMaxLength(4)
                        .HasColumnType("character(4)")
                        .HasColumnName("establishment_number")
                        .IsFixedLength();

                    b.Property<int>("EstablishmentSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("establishment_source_id");

                    b.Property<int?>("EstablishmentStatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("establishment_status_code");

                    b.Property<string>("EstablishmentStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("establishment_status_name");

                    b.Property<string>("EstablishmentTypeCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("establishment_type_code");

                    b.Property<int?>("EstablishmentTypeGroupCode")
                        .HasColumnType("integer")
                        .HasColumnName("establishment_type_group_code");

                    b.Property<string>("EstablishmentTypeGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("establishment_type_group_name");

                    b.Property<string>("EstablishmentTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("establishment_type_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("LaCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("la_code")
                        .IsFixedLength();

                    b.Property<string>("LaName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("la_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Locality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("locality")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postcode")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Town")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("town")
                        .UseCollation("case_insensitive");

                    b.Property<int?>("Urn")
                        .HasMaxLength(6)
                        .HasColumnType("integer")
                        .HasColumnName("urn")
                        .IsFixedLength();

                    b.HasKey("EstablishmentId")
                        .HasName("pk_establishments");

                    b.HasIndex("EstablishmentSourceId")
                        .HasDatabaseName("ix_establishment_establishment_source_id");

                    b.HasIndex("Urn")
                        .IsUnique()
                        .HasDatabaseName("ix_establishment_urn");

                    b.HasIndex("LaCode", "EstablishmentNumber")
                        .HasDatabaseName("ix_establishment_la_code_establishment_number");

                    b.ToTable("establishments", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.EstablishmentSource", b =>
                {
                    b.Property<int>("EstablishmentSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("establishment_source_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstablishmentSourceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.HasKey("EstablishmentSourceId")
                        .HasName("pk_establishment_sources");

                    b.ToTable("establishment_sources", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_name");

                    b.Property<DateTime>("Inserted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.HasKey("EventId")
                        .HasName("pk_events");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_events_key")
                        .HasFilter("key is not null");

                    b.HasIndex("Payload")
                        .HasDatabaseName("ix_events_payload");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Payload"), "gin");

                    b.HasIndex("PersonId", "EventName")
                        .HasDatabaseName("ix_events_person_id_event_name")
                        .HasFilter("person_id is not null");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("PersonId", "EventName"), new[] { "Payload" });

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.EytsAwardedEmailsJob", b =>
                {
                    b.Property<Guid>("EytsAwardedEmailsJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("eyts_awarded_emails_job_id");

                    b.Property<DateTime>("AwardedToUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("awarded_to_utc");

                    b.Property<DateTime>("ExecutedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_utc");

                    b.HasKey("EytsAwardedEmailsJobId")
                        .HasName("pk_eyts_awarded_emails_jobs");

                    b.HasIndex("ExecutedUtc")
                        .HasDatabaseName("ix_eyts_awarded_emails_jobs_executed_utc");

                    b.ToTable("eyts_awarded_emails_jobs", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.EytsAwardedEmailsJobItem", b =>
                {
                    b.Property<Guid>("EytsAwardedEmailsJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("eyts_awarded_emails_job_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email_address");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean")
                        .HasColumnName("email_sent");

                    b.Property<string>("Personalization")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("personalization");

                    b.Property<string>("Trn")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.HasKey("EytsAwardedEmailsJobId", "PersonId")
                        .HasName("pk_eyts_awarded_emails_job_items");

                    b.HasIndex("Personalization")
                        .HasDatabaseName("ix_eyts_awarded_emails_job_items_personalization");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Personalization"), "gin");

                    b.ToTable("eyts_awarded_emails_job_items", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InductionCompletedEmailsJob", b =>
                {
                    b.Property<Guid>("InductionCompletedEmailsJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("induction_completed_emails_job_id");

                    b.Property<DateTime>("AwardedToUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("awarded_to_utc");

                    b.Property<DateTime>("ExecutedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_utc");

                    b.HasKey("InductionCompletedEmailsJobId")
                        .HasName("pk_induction_completed_emails_jobs");

                    b.HasIndex("ExecutedUtc")
                        .HasDatabaseName("ix_induction_completed_emails_jobs_executed_utc");

                    b.ToTable("induction_completed_emails_jobs", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InductionCompletedEmailsJobItem", b =>
                {
                    b.Property<Guid>("InductionCompletedEmailsJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("induction_completed_emails_job_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email_address");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean")
                        .HasColumnName("email_sent");

                    b.Property<string>("Personalization")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("personalization");

                    b.Property<string>("Trn")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.HasKey("InductionCompletedEmailsJobId", "PersonId")
                        .HasName("pk_induction_completed_emails_job_items");

                    b.HasIndex("Personalization")
                        .HasDatabaseName("ix_induction_completed_emails_job_items_personalization");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Personalization"), "gin");

                    b.ToTable("induction_completed_emails_job_items", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InternationalQtsAwardedEmailsJob", b =>
                {
                    b.Property<Guid>("InternationalQtsAwardedEmailsJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("international_qts_awarded_emails_job_id");

                    b.Property<DateTime>("AwardedToUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("awarded_to_utc");

                    b.Property<DateTime>("ExecutedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_utc");

                    b.HasKey("InternationalQtsAwardedEmailsJobId")
                        .HasName("pk_international_qts_awarded_emails_jobs");

                    b.HasIndex("ExecutedUtc")
                        .HasDatabaseName("ix_international_qts_awarded_emails_jobs_executed_utc");

                    b.ToTable("international_qts_awarded_emails_jobs", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InternationalQtsAwardedEmailsJobItem", b =>
                {
                    b.Property<Guid>("InternationalQtsAwardedEmailsJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("international_qts_awarded_emails_job_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email_address");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean")
                        .HasColumnName("email_sent");

                    b.Property<string>("Personalization")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("personalization");

                    b.Property<string>("Trn")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.HasKey("InternationalQtsAwardedEmailsJobId", "PersonId")
                        .HasName("pk_international_qts_awarded_emails_job_items");

                    b.HasIndex("Personalization")
                        .HasDatabaseName("ix_international_qts_awarded_emails_job_items_personalization");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Personalization"), "gin");

                    b.ToTable("international_qts_awarded_emails_job_items", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.JourneyState", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("instance_id");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_id");

                    b.HasKey("InstanceId")
                        .HasName("pk_journey_states");

                    b.ToTable("journey_states", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.MandatoryQualificationProvider", b =>
                {
                    b.Property<Guid>("MandatoryQualificationProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("mandatory_qualification_provider_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("MandatoryQualificationProviderId")
                        .HasName("pk_mandatory_qualification_providers");

                    b.ToTable("mandatory_qualification_providers", (string)null);

                    b.HasData(
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("e28ea41d-408d-4c89-90cc-8b9b04ac68f5"),
                            Name = "University of Birmingham"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("89f9a1aa-3d68-4985-a4ce-403b6044c18c"),
                            Name = "University of Leeds"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("aa5c300e-3b7c-456c-8183-3520b3d55dca"),
                            Name = "University of Manchester"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("f417e73e-e2ad-40eb-85e3-55865be7f6be"),
                            Name = "Mary Hare School / University of Hertfordshire"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("fbf22e04-b274-4c80-aba8-79fb6a7a32ce"),
                            Name = "University of Edinburgh"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("26204149-349c-4ad6-9466-bb9b83723eae"),
                            Name = "Liverpool John Moores University"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("0c30f666-647c-4ea8-8883-0fc6010b56be"),
                            Name = "University of Oxford/Oxford Polytechnic"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("d0e6d54c-5e90-438a-945d-f97388c2b352"),
                            Name = "University of Cambridge"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("aec32252-ef25-452e-a358-34a04e03369c"),
                            Name = "University of Newcastle-upon-Tyne"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("d9ee7054-7fde-4cfd-9a5e-4b99511d1b3d"),
                            Name = "University of Plymouth"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("707d58ca-1953-413b-9a46-41e9b0be885e"),
                            Name = "University of Hertfordshire"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("3fc648a7-18e4-49e7-8a4b-1612616b72d5"),
                            Name = "University of London"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("374dceb8-8224-45b8-b7dc-a6b0282b1065"),
                            Name = "Bristol Polytechnic"
                        },
                        new
                        {
                            MandatoryQualificationProviderId = new Guid("d4fc958b-21de-47ec-9f03-36ae237a1b11"),
                            Name = "University College, Swansea"
                        });
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.NameSynonyms", b =>
                {
                    b.Property<long>("NameSynonymsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("name_synonyms_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NameSynonymsId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.Property<string[]>("Synonyms")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("synonyms")
                        .UseCollation("case_insensitive");

                    b.HasKey("NameSynonymsId")
                        .HasName("pk_name_synonyms");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_name_synonyms_name");

                    b.ToTable("name_synonyms", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.OneLoginUser", b =>
                {
                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<DateTime>("FirstOneLoginSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_one_login_sign_in");

                    b.Property<DateTime?>("FirstSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_sign_in");

                    b.Property<string>("LastCoreIdentityVc")
                        .HasColumnType("jsonb")
                        .HasColumnName("last_core_identity_vc");

                    b.Property<DateTime>("LastOneLoginSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_one_login_sign_in");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<int?>("VerificationRoute")
                        .HasColumnType("integer")
                        .HasColumnName("verification_route");

                    b.Property<string>("VerifiedDatesOfBirth")
                        .HasColumnType("jsonb")
                        .HasColumnName("verified_dates_of_birth");

                    b.Property<string>("VerifiedNames")
                        .HasColumnType("jsonb")
                        .HasColumnName("verified_names");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_on");

                    b.HasKey("Subject")
                        .HasName("pk_one_login_users");

                    b.ToTable("one_login_users", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<Guid?>("DqtContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("dqt_contact_id");

                    b.Property<DateTime?>("DqtCreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_created_on");

                    b.Property<string>("DqtFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dqt_first_name")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("DqtFirstSync")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_first_sync");

                    b.Property<string>("DqtLastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dqt_last_name")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("DqtLastSync")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_last_sync");

                    b.Property<string>("DqtMiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dqt_middle_name")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("DqtModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_modified_on");

                    b.Property<int?>("DqtState")
                        .HasColumnType("integer")
                        .HasColumnName("dqt_state");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_address")
                        .UseCollation("case_insensitive");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("NationalInsuranceNumber")
                        .HasMaxLength(9)
                        .HasColumnType("character(9)")
                        .HasColumnName("national_insurance_number")
                        .IsFixedLength();

                    b.Property<string>("Trn")
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("PersonId")
                        .HasName("pk_persons");

                    b.HasIndex("DqtContactId")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_dqt_contact_id")
                        .HasFilter("dqt_contact_id is not null");

                    b.HasIndex("Trn")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_trn")
                        .HasFilter("trn is not null");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.PersonEmployment", b =>
                {
                    b.Property<Guid>("PersonEmploymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_employment_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("integer")
                        .HasColumnName("employment_type");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("EstablishmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("establishment_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("PersonEmploymentId")
                        .HasName("pk_person_employments");

                    b.HasIndex("EstablishmentId")
                        .HasDatabaseName("ix_person_employments_establishment_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_employments_person_id");

                    b.ToTable("person_employments", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.PersonSearchAttribute", b =>
                {
                    b.Property<long>("PersonSearchAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("person_search_attribute_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PersonSearchAttributeId"));

                    b.Property<string>("AttributeKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("attribute_key")
                        .UseCollation("case_insensitive");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("attribute_type")
                        .UseCollation("case_insensitive");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("attribute_value")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("PersonSearchAttributeId")
                        .HasName("pk_person_search_attributes");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_search_attributes_person_id");

                    b.HasIndex("AttributeType", "AttributeValue")
                        .HasDatabaseName("ix_person_search_attributes_attribute_type_and_value");

                    b.ToTable("person_search_attributes", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.QtsAwardedEmailsJob", b =>
                {
                    b.Property<Guid>("QtsAwardedEmailsJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("qts_awarded_emails_job_id");

                    b.Property<DateTime>("AwardedToUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("awarded_to_utc");

                    b.Property<DateTime>("ExecutedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_utc");

                    b.HasKey("QtsAwardedEmailsJobId")
                        .HasName("pk_qts_awarded_emails_jobs");

                    b.HasIndex("ExecutedUtc")
                        .HasDatabaseName("ix_qts_awarded_emails_jobs_executed_utc");

                    b.ToTable("qts_awarded_emails_jobs", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.QtsAwardedEmailsJobItem", b =>
                {
                    b.Property<Guid>("QtsAwardedEmailsJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("qts_awarded_emails_job_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email_address");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean")
                        .HasColumnName("email_sent");

                    b.Property<string>("Personalization")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("personalization");

                    b.Property<string>("Trn")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.HasKey("QtsAwardedEmailsJobId", "PersonId")
                        .HasName("pk_qts_awarded_emails_job_items");

                    b.HasIndex("Personalization")
                        .HasDatabaseName("ix_qts_awarded_emails_job_items_personalization");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Personalization"), "gin");

                    b.ToTable("qts_awarded_emails_job_items", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.Qualification", b =>
                {
                    b.Property<Guid>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("qualification_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<DateTime?>("DqtCreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_created_on");

                    b.Property<DateTime?>("DqtFirstSync")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_first_sync");

                    b.Property<DateTime?>("DqtLastSync")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_last_sync");

                    b.Property<DateTime?>("DqtModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dqt_modified_on");

                    b.Property<Guid?>("DqtQualificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("dqt_qualification_id");

                    b.Property<int?>("DqtState")
                        .HasColumnType("integer")
                        .HasColumnName("dqt_state");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<int>("QualificationType")
                        .HasColumnType("integer")
                        .HasColumnName("qualification_type");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("QualificationId")
                        .HasName("pk_qualifications");

                    b.HasIndex("DqtQualificationId")
                        .IsUnique()
                        .HasDatabaseName("ix_qualifications_dqt_qualification_id")
                        .HasFilter("dqt_qualification_id is not null");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_qualifications_person_id");

                    b.ToTable("qualifications", (string)null);

                    b.HasDiscriminator<int>("QualificationType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtract", b =>
                {
                    b.Property<Guid>("TpsCsvExtractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tps_csv_extract_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("filename");

                    b.HasKey("TpsCsvExtractId")
                        .HasName("pk_tps_csv_extracts");

                    b.ToTable("tps_csv_extracts", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtractItem", b =>
                {
                    b.Property<Guid>("TpsCsvExtractItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tps_csv_extract_item_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date")
                        .HasColumnName("date_of_death");

                    b.Property<DateOnly?>("EmploymentEndDate")
                        .HasColumnType("date")
                        .HasColumnName("employment_end_date");

                    b.Property<DateOnly>("EmploymentStartDate")
                        .HasColumnType("date")
                        .HasColumnName("employment_start_date");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("integer")
                        .HasColumnName("employment_type");

                    b.Property<string>("EstablishmentEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("establishment_email_address");

                    b.Property<string>("EstablishmentNumber")
                        .HasMaxLength(4)
                        .HasColumnType("character(4)")
                        .HasColumnName("establishment_number")
                        .IsFixedLength();

                    b.Property<string>("EstablishmentPostcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("establishment_postcode");

                    b.Property<DateOnly>("ExtractDate")
                        .HasColumnType("date")
                        .HasColumnName("extract_date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("LocalAuthorityCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("local_authority_code")
                        .IsFixedLength();

                    b.Property<string>("MemberEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("member_email_address");

                    b.Property<int?>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<string>("MemberPostcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("member_postcode");

                    b.Property<string>("NationalInsuranceNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character(9)")
                        .HasColumnName("national_insurance_number")
                        .IsFixedLength();

                    b.Property<int?>("Result")
                        .HasColumnType("integer")
                        .HasColumnName("result");

                    b.Property<Guid>("TpsCsvExtractId")
                        .HasColumnType("uuid")
                        .HasColumnName("tps_csv_extract_id");

                    b.Property<Guid>("TpsCsvExtractLoadItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("tps_csv_extract_load_item_id");

                    b.Property<string>("Trn")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character(7)")
                        .HasColumnName("trn")
                        .IsFixedLength();

                    b.Property<string>("WithdrawlIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("withdrawl_indicator")
                        .IsFixedLength();

                    b.HasKey("TpsCsvExtractItemId")
                        .HasName("pk_tps_csv_extract_items");

                    b.HasIndex("TpsCsvExtractId")
                        .HasDatabaseName("ix_tps_csv_extract_items_tps_csv_extract_id");

                    b.HasIndex("TpsCsvExtractLoadItemId")
                        .HasDatabaseName("ix_tps_csv_extract_items_tps_csv_extract_load_item_id");

                    b.HasIndex("Trn")
                        .HasDatabaseName("ix_tps_csv_extract_items_trn");

                    b.HasIndex("LocalAuthorityCode", "EstablishmentNumber")
                        .HasDatabaseName("ix_tps_csv_extract_items_la_code_establishment_number");

                    b.ToTable("tps_csv_extract_items", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtractLoadItem", b =>
                {
                    b.Property<Guid>("TpsCsvExtractLoadItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tps_csv_extract_load_item_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DateOfDeath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("date_of_death");

                    b.Property<string>("EmploymentEndDate")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("employment_end_date");

                    b.Property<string>("EmploymentStartDate")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("employment_start_date");

                    b.Property<int?>("Errors")
                        .HasColumnType("integer")
                        .HasColumnName("errors");

                    b.Property<string>("EstablishmentEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("establishment_email_address");

                    b.Property<string>("EstablishmentNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("establishment_number");

                    b.Property<string>("EstablishmentPostcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("establishment_postcode");

                    b.Property<string>("ExtractDate")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("extract_date");

                    b.Property<string>("FullOrPartTimeIndicator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_or_part_time_indicator");

                    b.Property<string>("Gender")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("gender");

                    b.Property<string>("LocalAuthorityCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("local_authority_code");

                    b.Property<string>("MemberEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("member_email_address");

                    b.Property<string>("MemberId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("member_id");

                    b.Property<string>("MemberPostcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("member_postcode");

                    b.Property<string>("NationalInsuranceNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("national_insurance_number");

                    b.Property<Guid>("TpsCsvExtractId")
                        .HasColumnType("uuid")
                        .HasColumnName("tps_csv_extract_id");

                    b.Property<string>("Trn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("trn");

                    b.Property<string>("WithdrawlIndicator")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("withdrawl_indicator");

                    b.HasKey("TpsCsvExtractLoadItemId")
                        .HasName("pk_tps_csv_extract_load_items");

                    b.ToTable("tps_csv_extract_load_items", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.TrnRequest", b =>
                {
                    b.Property<long>("TrnRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("trn_request_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TrnRequestId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_id");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_user_id");

                    b.Property<bool>("LinkedToIdentity")
                        .HasColumnType("boolean")
                        .HasColumnName("linked_to_identity");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("request_id");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.Property<string>("TrnToken")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("trn_token");

                    b.HasKey("TrnRequestId")
                        .HasName("pk_trn_requests");

                    b.HasIndex("ClientId", "RequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_trn_requests_client_id_request_id");

                    b.ToTable("trn_requests", (string)null);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.UserBase", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.MandatoryQualification", b =>
                {
                    b.HasBaseType("TeachingRecordSystem.Core.DataStore.Postgres.Models.Qualification");

                    b.Property<Guid?>("DqtMqEstablishmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("dqt_mq_establishment_id");

                    b.Property<Guid?>("DqtSpecialismId")
                        .HasColumnType("uuid")
                        .HasColumnName("dqt_specialism_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("mq_provider_id");

                    b.Property<int?>("Specialism")
                        .HasColumnType("integer")
                        .HasColumnName("mq_specialism");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("mq_status");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("TeachingRecordSystem.Core.DataStore.Postgres.Models.UserBase");

                    b.Property<string[]>("ApiRoles")
                        .HasColumnType("varchar[]")
                        .HasColumnName("api_roles");

                    b.Property<string>("ClientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_secret");

                    b.Property<bool>("IsOidcClient")
                        .HasColumnType("boolean")
                        .HasColumnName("is_oidc_client");

                    b.Property<string>("OneLoginAuthenticationSchemeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("one_login_authentication_scheme_name");

                    b.Property<string>("OneLoginClientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("one_login_client_id");

                    b.Property<string>("OneLoginPostLogoutRedirectUriPath")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("one_login_post_logout_redirect_uri_path");

                    b.Property<string>("OneLoginPrivateKeyPem")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("one_login_private_key_pem");

                    b.Property<string>("OneLoginRedirectUriPath")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("one_login_redirect_uri_path");

                    b.Property<List<string>>("PostLogoutRedirectUris")
                        .HasColumnType("varchar[]")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<List<string>>("RedirectUris")
                        .HasColumnType("varchar[]")
                        .HasColumnName("redirect_uris");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_client_id")
                        .HasFilter("client_id is not null");

                    b.HasIndex("OneLoginAuthenticationSchemeName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_one_login_authentication_scheme_name")
                        .HasFilter("one_login_authentication_scheme_name is not null");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.SystemUser", b =>
                {
                    b.HasBaseType("TeachingRecordSystem.Core.DataStore.Postgres.Models.UserBase");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a81394d1-a498-46d8-af3e-e077596ab303"),
                            Active = true,
                            Name = "System",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.User", b =>
                {
                    b.HasBaseType("TeachingRecordSystem.Core.DataStore.Postgres.Models.UserBase");

                    b.Property<string>("AzureAdUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("azure_ad_user_id");

                    b.Property<Guid?>("DqtUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("dqt_user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email")
                        .UseCollation("case_insensitive");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("roles");

                    b.HasIndex("AzureAdUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_azure_ad_user_id");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_oidc_authorizations_oidc_applications_application_id");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<System.Guid>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_oidc_tokens_oidc_applications_application_id");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fk_oidc_tokens_oidc_authorizations_authorization_id");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.ApiKey", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_key_application_user");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.Establishment", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.EstablishmentSource", null)
                        .WithMany()
                        .HasForeignKey("EstablishmentSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_establishments_establishment_source_id");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.EytsAwardedEmailsJobItem", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.EytsAwardedEmailsJob", "EytsAwardedEmailsJob")
                        .WithMany("JobItems")
                        .HasForeignKey("EytsAwardedEmailsJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_eyts_awarded_emails_job_items_eyts_awarded_emails_jobs_eyts");

                    b.Navigation("EytsAwardedEmailsJob");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InductionCompletedEmailsJobItem", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.InductionCompletedEmailsJob", "InductionCompletedEmailsJob")
                        .WithMany("JobItems")
                        .HasForeignKey("InductionCompletedEmailsJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_induction_completed_emails_job_items_induction_completed_em");

                    b.Navigation("InductionCompletedEmailsJob");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InternationalQtsAwardedEmailsJobItem", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.InternationalQtsAwardedEmailsJob", "InternationalQtsAwardedEmailsJob")
                        .WithMany("JobItems")
                        .HasForeignKey("InternationalQtsAwardedEmailsJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_international_qts_awarded_emails_job_items_international_qt");

                    b.Navigation("InternationalQtsAwardedEmailsJob");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.OneLoginUser", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("TeachingRecordSystem.Core.DataStore.Postgres.Models.OneLoginUser", "PersonId")
                        .HasConstraintName("fk_one_login_users_persons_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.PersonEmployment", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.Establishment", null)
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .HasConstraintName("fk_person_employments_establishment_id");

                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_employments_person_id");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.QtsAwardedEmailsJobItem", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.QtsAwardedEmailsJob", "QtsAwardedEmailsJob")
                        .WithMany("JobItems")
                        .HasForeignKey("QtsAwardedEmailsJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_qts_awarded_emails_job_items_qts_awarded_emails_jobs_qts_aw");

                    b.Navigation("QtsAwardedEmailsJob");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.Qualification", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_qualifications_person");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtractItem", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtract", null)
                        .WithMany()
                        .HasForeignKey("TpsCsvExtractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tps_csv_extract_items_tps_csv_extract_id");

                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtractLoadItem", null)
                        .WithMany()
                        .HasForeignKey("TpsCsvExtractLoadItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tps_csv_extract_items_tps_csv_extract_load_item_id");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtractLoadItem", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.TpsCsvExtract", null)
                        .WithMany()
                        .HasForeignKey("TpsCsvExtractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tps_csv_extract_load_items_tps_csv_extract_id");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.MandatoryQualification", b =>
                {
                    b.HasOne("TeachingRecordSystem.Core.DataStore.Postgres.Models.MandatoryQualificationProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_qualifications_mandatory_qualification_provider");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<System.Guid>", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<System.Guid>", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.EytsAwardedEmailsJob", b =>
                {
                    b.Navigation("JobItems");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InductionCompletedEmailsJob", b =>
                {
                    b.Navigation("JobItems");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.InternationalQtsAwardedEmailsJob", b =>
                {
                    b.Navigation("JobItems");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.QtsAwardedEmailsJob", b =>
                {
                    b.Navigation("JobItems");
                });

            modelBuilder.Entity("TeachingRecordSystem.Core.DataStore.Postgres.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
