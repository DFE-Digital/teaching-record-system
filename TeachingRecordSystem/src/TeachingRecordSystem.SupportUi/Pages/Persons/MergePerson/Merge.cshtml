@page "/persons/{personId}/merge/merge"
@using TeachingRecordSystem.SupportUi.Pages.Shared
@model TeachingRecordSystem.SupportUi.Pages.Persons.MergePerson.MergeModel
@{
    Layout = "_Layout";
    ViewBag.Title = "Select the details to merge into the primary record";
}

@section BeforeContent {
    <govuk-back-link data-testid="back-link" href="@Model.BackLink" />
}

@functions {
#pragma warning disable CS1998
    private async Task RenderChoosePersonAttribute(
        string label,
        bool different,
        string name,
        string? leftLabel,
        string? rightLabel,
        PersonAttributeSource? selectedValue)
    {
        var chooseAttributeModel = new ChoosePersonAttributeViewModel()
        {
            Label = label,
            Different = different,
            Name = name,
            LeftValue = PersonAttributeSource.PrimaryPerson,
            LeftLabel = leftLabel,
            RightValue = PersonAttributeSource.SecondaryPerson,
            RightLabel = rightLabel,
            SelectedValue = selectedValue
        };
        <partial name="Shared/_ChoosePersonAttribute" model="@chooseAttributeModel" />
    }
#pragma warning restore CS1998
}

<form action="@Model.GetPageLink(MergePersonJourneyPage.Merge)" method="post" data-testid="submit-form">
    <span class="govuk-caption-l">Support tasks</span>
    <h1 class="govuk-heading-l">@ViewBag.Title</h1>

    <div style="display: flex">
        <div class="govuk-heading-m govuk-!-width-one-half">
            Primary record (TRN @Model.Trn!.PrimaryPersonValue)
        </div>
        <div class="govuk-heading-m govuk-!-width-one-half">
            Secondary record (TRN @Model.Trn!.SecondaryPersonValue)
        </div>
    </div>

    <table class="govuk-table">
        <tbody class="govuk-table__body">
            @{
                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.FirstNameSource),
                    Model.FirstName!.Different,
                    Html.NameFor(m => m.FirstNameSource),
                    Model.FirstName!.PrimaryPersonValue,
                    Model.FirstName!.SecondaryPersonValue,
                    Model.FirstNameSource);

                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.MiddleNameSource),
                    Model.MiddleName!.Different,
                    Html.NameFor(m => m.MiddleNameSource),
                    Model.MiddleName!.PrimaryPersonValue,
                    Model.MiddleName!.SecondaryPersonValue,
                    Model.MiddleNameSource);

                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.LastNameSource),
                    Model.LastName!.Different,
                    Html.NameFor(m => m.LastNameSource),
                    Model.LastName!.PrimaryPersonValue,
                    Model.LastName!.SecondaryPersonValue,
                    Model.LastNameSource);

                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.DateOfBirthSource),
                    Model.DateOfBirth!.Different,
                    Html.NameFor(m => m.DateOfBirthSource),
                    Model.DateOfBirth!.PrimaryPersonValue?.ToString(UiDefaults.DateOnlyDisplayFormat),
                    Model.DateOfBirth!.SecondaryPersonValue?.ToString(UiDefaults.DateOnlyDisplayFormat),
                    Model.DateOfBirthSource);

                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.EmailAddressSource),
                    Model.EmailAddress!.Different,
                    Html.NameFor(m => m.EmailAddressSource),
                    Model.EmailAddress!.PrimaryPersonValue,
                    Model.EmailAddress!.SecondaryPersonValue,
                    Model.EmailAddressSource);

                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.NationalInsuranceNumberSource),
                    Model.NationalInsuranceNumber!.Different,
                    Html.NameFor(m => m.NationalInsuranceNumberSource),
                    Model.NationalInsuranceNumber!.PrimaryPersonValue,
                    Model.NationalInsuranceNumber!.SecondaryPersonValue,
                    Model.NationalInsuranceNumberSource);

                await RenderChoosePersonAttribute(
                    Html.DisplayNameFor(m => m.GenderSource),
                    Model.Gender!.Different,
                    Html.NameFor(m => m.GenderSource),
                    Model.Gender!.PrimaryPersonValue?.GetDisplayName(),
                    Model.Gender!.SecondaryPersonValue?.GetDisplayName(),
                    Model.GenderSource);
            }
        </tbody>
    </table>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop">
            <vc:upload-evidence evidence="@Model.Evidence" expression="Evidence" />

            <govuk-textarea for="Comments" label-class="govuk-label--s" />

            <p class="govuk-body govuk-!-font-size-24 govuk-!-font-weight-bold">Do you want to use these details in the primary record?</p>

            <govuk-warning-text>
                The secondary record will be deactivated once it’s merged with the primary record, but you’ll still be able to view it.
            </govuk-warning-text>

            <div class="govuk-button-group">
                <govuk-button type="submit" data-testid="continue-button">Continue</govuk-button>
                <govuk-button formaction="@Model.CancelLink" class="govuk-button--secondary" type="submit" data-testid="cancel-button">Cancel and return to record</govuk-button>
            </div>
        </div>
    </div>

</form>
