@page "/persons/{personId}/qualifications"
@using TeachingRecordSystem.SupportUi.Pages.Common;
@using TeachingRecordSystem.SupportUi.Infrastructure.Security;
@using Microsoft.AspNetCore.Authorization;
@using TeachingRecordSystem.SupportUi.Pages.RoutesToProfessionalStatus
@inject IAuthorizationService AuthorizationService
@model TeachingRecordSystem.SupportUi.Pages.Persons.PersonDetail.QualificationsModel
@{
    Layout = "Layout";
    ViewBag.SelectedTab = PersonDetailSubNavigationTab.Qualifications;
    var person = HttpContext.Features.GetRequiredFeature<CurrentPersonFeature>();
    var canEdit = (await AuthorizationService.AuthorizeAsync(User, AuthorizationPolicies.NonPersonOrAlertDataEdit)).Succeeded;
}

@section BeforeContent {
    <govuk-back-link href="@LinkGenerator.PersonDetail(person.PersonId)">Back to record</govuk-back-link>
}

@if (FeatureProvider.IsEnabled(FeatureNames.RoutesToProfessionalStatus))
{
    <h2 class="govuk-heading-m">Routes to professional statuses</h2>
    @if (Model.ProfessionalStatuses!.Length == 0)
    {
        <p class="govuk-body" data-testid="no-professional-statuses">No routes added yet</p>
    }
    else
    {
        @foreach (var professionalStatus in Model.ProfessionalStatuses)
        {
            var statusTitle = ProfessionalStatusStatusRegistry.GetTitle(professionalStatus.Status).ToUpper();
            var statusColor = professionalStatus.Status switch {
                RouteToProfessionalStatusStatus.Holds => "green",
                RouteToProfessionalStatusStatus.InTraining => "light-blue",
                _ => "pink"
            };
            var cardTitle = $"{professionalStatus.RouteToProfessionalStatusType?.ProfessionalStatusType.GetDisplayName()}";

            <govuk-summary-card data-testid="professionalstatus-@professionalStatus.QualificationId">
                <govuk-summary-card-title>@cardTitle</govuk-summary-card-title>
                <govuk-summary-card-actions>
                    @if (canEdit)
                    {
                        <govuk-summary-card-action href="@LinkGenerator.RouteEditDetail(professionalStatus.QualificationId, null)" visually-hidden-text="edit route" data-testid="edit-route-link-@professionalStatus.QualificationId">Edit route</govuk-summary-card-action>
                        <govuk-summary-card-action href="@LinkGenerator.RouteDeleteChangeReason(professionalStatus.QualificationId, null)" visually-hidden-text="delete route" data-testid="delete-route-link-@professionalStatus.QualificationId">Delete route</govuk-summary-card-action>
                    }
                </govuk-summary-card-actions>
                <govuk-summary-list>
                    <govuk-summary-list-row>
                        <govuk-summary-list-row-key>Route</govuk-summary-list-row-key>
                        <govuk-summary-list-row-value>@(professionalStatus.RouteToProfessionalStatusType!.Name)</govuk-summary-list-row-value>
                    </govuk-summary-list-row>
                    <govuk-summary-list-row>
                        <govuk-summary-list-row-key>Status</govuk-summary-list-row-key>
                        <govuk-summary-list-row-value>
                            <govuk-tag class="govuk-tag--@statusColor">
                                @statusTitle
                            </govuk-tag>
                        </govuk-summary-list-row-value>
                    </govuk-summary-list-row>
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType!.TrainingStartDateRequired, professionalStatus.Status.GetStartDateRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Start date</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.TrainingStartDate?.ToString(UiDefaults.DateOnlyDisplayFormat)</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.TrainingEndDateRequired, professionalStatus.Status.GetEndDateRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>End date</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.TrainingEndDate?.ToString(UiDefaults.DateOnlyDisplayFormat)</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.HoldsFromRequired, professionalStatus.Status.GetAwardDateRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Professional status date</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.HoldsFrom?.ToString(UiDefaults.DateOnlyDisplayFormat)</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.InductionExemptionRequired, professionalStatus.Status.GetInductionExemptionRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Induction exemption</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@(professionalStatus.ExemptFromInduction is bool value ? value ? "Yes" : "No" : null)</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.TrainingProviderRequired, professionalStatus.Status.GetTrainingProviderRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Training provider</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.TrainingProvider?.Name</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.DegreeTypeRequired, professionalStatus.Status.GetDegreeTypeRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Degree type</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.DegreeType?.Name</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.TrainingCountryRequired, professionalStatus.Status.GetCountryRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Country of training</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.TrainingCountry?.Name</govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.TrainingAgeSpecialismTypeRequired, professionalStatus.Status.GetAgeSpecialismRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                        <govuk-summary-list-row-key>Age range</govuk-summary-list-row-key>
                            @if (professionalStatus.TrainingAgeSpecialismRangeFrom is not null && professionalStatus.TrainingAgeSpecialismRangeTo is not null)
                            {
                                <govuk-summary-list-row-value use-empty-fallback>From @professionalStatus.TrainingAgeSpecialismRangeFrom to @professionalStatus.TrainingAgeSpecialismRangeTo</govuk-summary-list-row-value>
                            }
                            else
                            {
                                <govuk-summary-list-row-value use-empty-fallback>@professionalStatus.TrainingAgeSpecialismType?.GetDisplayName()</govuk-summary-list-row-value>
                            }
                        </govuk-summary-list-row>
                    }
                    @if (QuestionDriverHelper.FieldRequired(professionalStatus.RouteToProfessionalStatusType.TrainingSubjectsRequired, professionalStatus.Status.GetSubjectsRequirement()) != FieldRequirement.NotApplicable)
                    {
                        <govuk-summary-list-row>
                            <govuk-summary-list-row-key>Subjects</govuk-summary-list-row-key>
                            <govuk-summary-list-row-value>
                                @if (professionalStatus.TrainingSubjectIds is not null && professionalStatus.TrainingSubjectIds.Length > 0)
                                {
                                    <ul class="govuk-list">
                                        @foreach (var subjectid in professionalStatus.TrainingSubjectIds)
                                        {
                                            if (Model.TrainingSubjects != null && Model.TrainingSubjects.TryGetValue(subjectid, out var subjectName))
                                            {
                                                <li>@subjectName</li>
                                            }
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <span use-empty-fallback></span>
                                }
                            </govuk-summary-list-row-value>
                        </govuk-summary-list-row>
                    }
                    <govuk-summary-list-row>
                        <govuk-summary-list-row-key>Source application reference</govuk-summary-list-row-key>
                        <govuk-summary-list-row-value use-empty-fallback>
                            @professionalStatus.SourceApplicationReference
                        </govuk-summary-list-row-value>
                    </govuk-summary-list-row>
                </govuk-summary-list>
            </govuk-summary-card>
        }
    }

    @if (canEdit)
    {
        <govuk-button-link href="@LinkGenerator.RouteAdd(Model.PersonId)" class="govuk-button" data-testid="add-route">Add a route</govuk-button-link>
    }

    <hr class="govuk-section-break govuk-section-break--xl govuk-section-break--visible">
}
<h2 class="govuk-heading-m">Mandatory qualifications</h2>
@if (Model.MandatoryQualifications!.Length == 0)
{
    <p class="govuk-body" data-testid="no-mandatory-qualifications">No mandatory qualifications added yet</p>
}
else
{
    @foreach (var mq in Model.MandatoryQualifications)
    {
        <govuk-summary-card data-testid="mq-@mq.QualificationId">
            <govuk-summary-card-title>Mandatory qualification@(mq.Specialism is not null ? $" for {mq.Specialism?.GetName()}" : "")</govuk-summary-card-title>
            <govuk-summary-card-actions>
                @if (canEdit)
                {
                    <govuk-summary-card-action href="@LinkGenerator.MqDelete(mq.QualificationId, null)" visually-hidden-text="delete qualification" data-testid="delete-link-@mq.QualificationId">Delete qualification</govuk-summary-card-action>
                }
            </govuk-summary-card-actions>
            <govuk-summary-list>
                <govuk-summary-list-row>
                    <govuk-summary-list-row-key>Training provider</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value data-testid="mq-provider-@mq.QualificationId">@(mq.Provider?.Name ?? "None")</govuk-summary-list-row-value>
                    <govuk-summary-list-row-actions>
                        @if (canEdit)
                        {
                            <govuk-summary-list-row-action href="@LinkGenerator.MqEditProvider(mq.QualificationId, null)" class="govuk-link" visually-hidden-text="change training provider" data-testid="provider-change-link-@mq.QualificationId">Change</govuk-summary-list-row-action>
                        }
                    </govuk-summary-list-row-actions>
                </govuk-summary-list-row>
                <govuk-summary-list-row>
                    <govuk-summary-list-row-key>Specialism</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value data-testid="mq-specialism-@mq.QualificationId">@(mq.Specialism is not null ? mq.Specialism?.GetTitle() : "None")</govuk-summary-list-row-value>
                    <govuk-summary-list-row-actions>
                        @if (canEdit)
                        {
                            <govuk-summary-list-row-action href="@LinkGenerator.MqEditSpecialism(mq.QualificationId, null)" class="govuk-link" visually-hidden-text="change specialism" data-testid="specialism-change-link-@mq.QualificationId">Change</govuk-summary-list-row-action>
                        }
                    </govuk-summary-list-row-actions>
                </govuk-summary-list-row>
                <govuk-summary-list-row>
                    <govuk-summary-list-row-key>Start date</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value data-testid="mq-start-date-@mq.QualificationId">@(mq.StartDate.HasValue ? mq.StartDate!.Value.ToString(UiDefaults.DateOnlyDisplayFormat) : "None")</govuk-summary-list-row-value>
                    <govuk-summary-list-row-actions>
                        @if (canEdit)
                        {
                            <govuk-summary-list-row-action href="@LinkGenerator.MqEditStartDate(mq.QualificationId, null)" class="govuk-link" visually-hidden-text="change start date" data-testid="start-date-change-link-@mq.QualificationId">Change</govuk-summary-list-row-action>
                        }
                    </govuk-summary-list-row-actions>
                </govuk-summary-list-row>
                <govuk-summary-list-row>
                    <govuk-summary-list-row-key>Status</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value data-testid="mq-status-@mq.QualificationId">@(mq.Status.HasValue ? mq.Status?.GetTitle() : "None")</govuk-summary-list-row-value>
                    <govuk-summary-list-row-actions>
                        @if (canEdit)
                        {
                            <govuk-summary-list-row-action href="@LinkGenerator.MqEditStatus(mq.QualificationId, null)" visually-hidden-text="change status" data-testid="status-change-link-@mq.QualificationId">Change</govuk-summary-list-row-action>
                        }
                    </govuk-summary-list-row-actions>
                </govuk-summary-list-row>
                <govuk-summary-list-row>
                    <govuk-summary-list-row-key>End date</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value data-testid="mq-end-date-@mq.QualificationId">@(mq.EndDate.HasValue ? mq.EndDate!.Value.ToString(UiDefaults.DateOnlyDisplayFormat) : "None")</govuk-summary-list-row-value>
                    <govuk-summary-list-row-actions>
                        @if (canEdit)
                        {
                            <govuk-summary-list-row-action href="@LinkGenerator.MqEditStatus(mq.QualificationId, null)" visually-hidden-text="change end date" data-testid="end-date-change-link-@mq.QualificationId">Change</govuk-summary-list-row-action>
                        }
                    </govuk-summary-list-row-actions>
                </govuk-summary-list-row>
            </govuk-summary-list>
        </govuk-summary-card>
    }
}
@if (canEdit)
{
    <govuk-button-link href="@LinkGenerator.MqAdd(Model.PersonId)" class="govuk-button" data-testid="add-mandatory-qualification">Add a mandatory qualification</govuk-button-link>
}
