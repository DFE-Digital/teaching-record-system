@page "/persons/{personId}/induction"
@using TeachingRecordSystem.SupportUi.Pages.Common;
@model TeachingRecordSystem.SupportUi.Pages.Persons.PersonDetail.InductionModel;
@{
    Layout = "Layout";
    ViewBag.SelectedTab = PersonDetailSubNavigationTab.Induction;
    var person = HttpContext.Features.GetRequiredFeature<CurrentPersonFeature>();
}

@section BeforeContent {
    <govuk-back-link href="@LinkGenerator2.Persons.PersonDetail.Index(person.PersonId)" data-testid="induction-backlink">Back to record</govuk-back-link>
}

@if (!string.IsNullOrEmpty(Model.StatusWarningMessage))
{
    <govuk-warning-text icon-fallback-text="Warning" data-testid="induction-status-warning">@Model.StatusWarningMessage</govuk-warning-text>
}

@if (Model.HasQts)
{
    <govuk-summary-card data-testid="induction-card">
        <govuk-summary-card-title data-testid="induction-title">Induction details</govuk-summary-card-title>
        <govuk-summary-list>
            <govuk-summary-list-row data-testid="induction-status">
                <govuk-summary-list-row-key>Induction status</govuk-summary-list-row-key>
                <govuk-summary-list-row-value>@Model.Status.GetTitle()</govuk-summary-list-row-value>
                @if (Model.CanWrite)
                {
                    <govuk-summary-list-row-actions>
                        <govuk-summary-list-row-action data-testid="change-induction-status" href="@LinkGenerator2.Persons.PersonDetail.EditInduction.Status(person.PersonId, journeyInstanceId: null)" visually-hidden-text="status">Change</govuk-summary-list-row-action>
                    </govuk-summary-list-row-actions>
                }
            </govuk-summary-list-row>

            @if (Model.ExemptionReasonIdsHeldOnPerson!.Length > 0)
            {
                <govuk-summary-list-row class="govuk-list--spaced" data-testid="induction-exemption-reasons">
                    <govuk-summary-list-row-key>Exemption reason</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value>
                        @if (Model.ExemptionReasonNames is not null)
                        {
                            <ul class="govuk-list">
                                @foreach (var exemptionReason in Model.ExemptionReasonNames)
                                {
                                    <li>@exemptionReason</li>
                                }
                            </ul>
                        }
                    </govuk-summary-list-row-value>
                    @if (Model.CanWrite)
                    {
                        <govuk-summary-list-row-actions>
                            <govuk-summary-list-row-action data-testid="change-induction-exemption-reason" href="@LinkGenerator2.Persons.PersonDetail.EditInduction.ExemptionReasons(person.PersonId, journeyInstanceId: null)" visually-hidden-text="exemption reason">Change</govuk-summary-list-row-action>
                        </govuk-summary-list-row-actions>
                    }
                </govuk-summary-list-row>
            }

            @if (Model.ShowStartDate)
            {
                <govuk-summary-list-row data-testid="induction-start-date">
                    <govuk-summary-list-row-key>Induction started on</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value>@Model.StartDate?.ToString(UiDefaults.DateOnlyDisplayFormat)</govuk-summary-list-row-value>
                    @if (Model.CanWrite)
                    {
                        <govuk-summary-list-row-actions>
                            <govuk-summary-list-row-action data-testid="change-induction-start-date" href="@LinkGenerator2.Persons.PersonDetail.EditInduction.StartDate(person.PersonId, journeyInstanceId: null)" visually-hidden-text="start date">Change</govuk-summary-list-row-action>
                        </govuk-summary-list-row-actions>
                    }
                </govuk-summary-list-row>
            }

            @if (Model.ShowCompletedDate)
            {
                <govuk-summary-list-row data-testid="induction-completed-date">
                    <govuk-summary-list-row-key>Induction completed on</govuk-summary-list-row-key>
                    <govuk-summary-list-row-value>@Model.CompletedDate?.ToString(UiDefaults.DateOnlyDisplayFormat)</govuk-summary-list-row-value>
                    @if (Model.CanWrite)
                    {
                        <govuk-summary-list-row-actions>
                            <govuk-summary-list-row-action data-testid="change-induction-completed-date" href="@LinkGenerator2.Persons.PersonDetail.EditInduction.CompletedDate(person.PersonId, journeyInstanceId: null)" visually-hidden-text="completed date">Change</govuk-summary-list-row-action>
                        </govuk-summary-list-row-actions>
                    }
                </govuk-summary-list-row>
            }

            @if (Model.InductionExemptedRoutes is not null)
            {
                foreach (var exemptedRoute in Model.InductionExemptedRoutes)
                {
                    <govuk-summary-list-row>
                        <govuk-summary-list-row-key>Route induction exemption reason</govuk-summary-list-row-key>
                        <govuk-summary-list-row-value>@($"{exemptedRoute.RouteToProfessionalStatusType?.InductionExemptionReason?.Name} - {exemptedRoute.RouteToProfessionalStatusType?.Name}")</govuk-summary-list-row-value>
                        @if (Model.CanWrite)
                        {
                            <govuk-summary-list-row-actions>
                                <govuk-summary-list-row-action data-testid="change-induction-exempted-route" href="@LinkGenerator2.RoutesToProfessionalStatus.EditRoute.Index(exemptedRoute.QualificationId, fromInductions: true)" visually-hidden-text="induction exemption reason">Change</govuk-summary-list-row-action>
                            </govuk-summary-list-row-actions>
                        }
                    </govuk-summary-list-row>
                }
            }
        </govuk-summary-list>
    </govuk-summary-card>
}
