name: Pull request build

on:
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # temporary - can corrupt PAAS Terraform state if deployments are cancelled

permissions:
  checks: write
  deployments: write
  packages: write
  pull-requests: write

jobs:
  build:
    name: Build & test
    runs-on: ubuntu-latest

    outputs:
      run_crm_integration_tests: ${{ steps.check_changed_files.outputs.run_crm_integration_tests }}

    env:
      MSSQL_DB: dqtreports
      MSSQL_PASSWORD: SuperS3cretPassw0rd

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: qtapi
          POSTGRES_DB: qtapi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ env.MSSQL_PASSWORD }}
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
          --health-interval 60s
          --health-timeout 30s
          --health-start-period 20s
          --health-retries 3

    steps:
    - uses: actions/checkout@v3

    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi
        echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
      env:
        TFVARS: terraform/paas/workspace_variables/dev.tfvars.json
      shell: bash

    - uses: Azure/get-keyvault-secrets@v1
      name: Get secrets
      id: get_secrets
      with:
        keyvault: ${{ steps.config.outputs.key_vault_name }}
        secrets: INTEGRATION-TEST-CONFIG

    - name: Install tools
      run: |
        dotnet tool install -g dotnet-format --version "7.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json >/dev/null

    - name: Create test reporting database
      run: docker exec $(docker ps --latest --quiet) /opt/mssql-tools/bin/sqlcmd -U "sa" -P "$MSSQL_PASSWORD" -Q "create database $MSSQL_DB; alter database $MSSQL_DB set ALLOW_SNAPSHOT_ISOLATION on;"

    - name: Restore
      run: dotnet restore
      working-directory: TeachingRecordSystem

    - name: Lint
      run: |
        git fetch origin main --quiet --depth=1
        CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA | { grep -oP '^TeachingRecordSystem\/\K.*\.cs$' || true; })

        if [ "$CHANGED_FILES" == "" ]; then
          echo "::notice::No changes to lint"
          exit 0
        fi

        INCLUDE_ARG="--include $(echo "$CHANGED_FILES" | tr '\n' ' ')"
        echo "::notice::Linting changed files only"

        dotnet-format --no-restore --verify-no-changes $INCLUDE_ARG
      working-directory: TeachingRecordSystem

    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: TeachingRecordSystem

    - name: Check changed files
      id: check_changed_files
      run: |
        # If no CRM integration files (or their tests) have been changed in this PR then skip CRM integration tests
        RUN_CRM_INTEGRATION_TESTS=true
        git fetch origin main --quiet --depth=1
        CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA)
        if [[ $(echo "$CHANGED_FILES" | grep -EL "DataStore/Crm|Tests/DataverseIntegration") ]]; then
          RUN_CRM_INTEGRATION_TESTS=false
        fi

        echo run_crm_integration_tests=$RUN_CRM_INTEGRATION_TESTS >> $GITHUB_OUTPUT
      shell: bash

    - name: Tests
      uses: ./.github/workflows/actions/test
      with:
        test_project_path: TeachingRecordSystem/tests/TeachingRecordSystem.Api.Tests
        report_name: "Test results"
        dotnet_test_args: >-
          --no-build
          -e ConnectionStrings__DefaultConnection="Host=localhost;Username=postgres;Password=qtapi;Database=qtapi"
          -e DqtReporting__ReportingDbConnectionString="Data Source=(local); Initial Catalog=${{ env.MSSQL_DB }}; User=sa; Password=${{ env.MSSQL_PASSWORD }}; TrustServerCertificate=True"
          --filter "FullyQualifiedName!~TeachingRecordSystem.Api.Tests.DataverseIntegration"
        config_json: ${{ steps.get_secrets.outputs.INTEGRATION-TEST-CONFIG }}

    - name: CRM integration tests
      if: steps.check_changed_files.outputs.run_crm_integration_tests == 'true'
      uses: ./.github/workflows/actions/test
      with:
        test_project_path: TeachingRecordSystem/tests/TeachingRecordSystem.Api.Tests
        report_name: "CRM integration test results"
        dotnet_test_args: >-
          --no-build
          -e ConnectionStrings__DefaultConnection="Host=localhost;Username=postgres;Password=qtapi;Database=qtapi"
          -e DqtReporting__ReportingDbConnectionString="Data Source=(local); Initial Catalog=${{ env.MSSQL_DB }}; User=sa; Password=${{ env.MSSQL_PASSWORD }}; TrustServerCertificate=True"
          --filter "FullyQualifiedName~TeachingRecordSystem.Api.Tests.DataverseIntegration"
        config_json: ${{ steps.get_secrets.outputs.INTEGRATION-TEST-CONFIG }}

  validate_terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [paas, aks]

    steps:
    - uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Check formatting
      run: terraform fmt -check -diff
      working-directory: terraform/${{ matrix.platform }}

    - name: Validate
      run: |
        terraform init -backend=false
        terraform validate -no-color
      working-directory: terraform/${{ matrix.platform }}

    - name: Lint
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tflint_rulesets: azurerm
        working_directory: terraform/${{ matrix.platform }}
      continue-on-error: true  # temporary- we're getting sporadic 503 errors here in action setup

  package:
    name: Package application
    needs: [build, validate_terraform]
    uses: ./.github/workflows/package.yml
    secrets: inherit

  deploy_dev:
    name: Deploy dev environment
    needs: package
    uses: ./.github/workflows/deploy-dev.yml
    with:
      api_docker_image: ${{ needs.package.outputs.api_docker_image }}
      ui_docker_image: ${{ needs.package.outputs.ui_docker_image }}
    secrets: inherit
