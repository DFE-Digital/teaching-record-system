name: Pull request build

on:
  pull_request:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # temporary - can corrupt PAAS Terraform state if deployments are cancelled

permissions:
  checks: write
  deployments: write
  packages: write
  pull-requests: write

jobs:
  build:
    name: Build & test
    runs-on: ubuntu-latest
    concurrency: build

    env:
      MSSQL_DB: dqtreports
      MSSQL_PASSWORD: SuperS3cretPassw0rd

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: qtapi
          POSTGRES_DB: qtapi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ env.MSSQL_PASSWORD }}
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
          --health-interval 60s
          --health-timeout 30s
          --health-start-period 20s
          --health-retries 3

    steps:
    - uses: actions/checkout@v3

    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi
        echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_ENV
      env:
        TFVARS: dev.tfvars.json
      shell: bash
      working-directory: terraform

    - uses: Azure/get-keyvault-secrets@v1
      id: get_secrets
      with:
        keyvault: ${{ env.key_vault_name }}
        secrets: 'INTEGRATION-TEST-CONFIG'

    - name: Set secret environment variables
      id: set_outputs
      run: |
        SECRET_KEYS=($(jq -r <<< "$SECRETS_JSON" | jq -r 'keys | @sh' | tr -d \'))
        for s in "${SECRET_KEYS[@]}"
        do
          SECRET=$(jq -r .${s} <<< "$SECRETS_JSON")
          echo "::add-mask::$SECRET"
          echo ${s}=$SECRET >> $GITHUB_ENV
        done
      env:
        SECRETS_JSON: ${{ steps.get_secrets.outputs.INTEGRATION-TEST-CONFIG }}
      shell: bash

    - name: Install tools
      run: |
        dotnet tool install -g dotnet-format --version "7.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json >/dev/null

    - name: Create test reporting database
      run: docker exec $(docker ps --latest --quiet) /opt/mssql-tools/bin/sqlcmd -U "sa" -P "$MSSQL_PASSWORD" -Q "create database $MSSQL_DB; alter database $MSSQL_DB set ALLOW_SNAPSHOT_ISOLATION on;"

    - name: Restore
      run: dotnet restore
      working-directory: QualifiedTeachersApi

    - name: Lint
      run: |
        git fetch origin main --quiet --depth=1
        CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA | { grep -oP '^QualifiedTeachersApi\/\K.*\.cs$' || true; })

        if [ "$CHANGED_FILES" == "" ]; then
          echo "::warning::No changes to lint"
          exit 0
        fi

        INCLUDE_ARG="--include $(echo "$CHANGED_FILES" | tr '\n' ' ')"
        echo "::notice::Linting changed files only"

        dotnet-format --no-restore --verify-no-changes $INCLUDE_ARG
      working-directory: QualifiedTeachersApi

    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: QualifiedTeachersApi

    - name: Determine test filter
      id: get_test_filter
      run: |
        # If no CRM integration files (or their tests) have been changed in this PR then skip Dataverse tests
        git fetch origin main --quiet --depth=1
        CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA)
        if [[ $(echo "$CHANGED_FILES" | grep -EL "DataStore/Crm|Tests/DataverseIntegration") ]]; then
          echo "::warning::Skipping DataverseAdapter tests"
          echo filter_arg='--filter "FullyQualifiedName!~QualifiedTeachersApi.Tests.DataverseIntegration"' >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Tests
      uses: ./.github/workflows/actions/test
      with:
        test_project_path: QualifiedTeachersApi/tests/QualifiedTeachersApi.Tests
        report_name: "Test results"
        dotnet_test_args: >-
          -e CrmUrl="${{ env.INTEGRATIONTESTS_CRMURL }}"
          -e CrmClientId="${{ env.INTEGRATIONTESTS_CRMCLIENTID }}"
          -e CrmClientSecret="${{ env.INTEGRATIONTESTS_CRMCLIENTSECRET }}"
          -e BuildEnvLockBlobUri="${{ env.INTEGRATIONTESTS_BUILDENVLOCKBLOBURI }}"
          -e BuildEnvLockBlobSasToken="${{ env.INTEGRATIONTESTS_BUILDENVLOCKBLOBSASTOKEN }}"
          -e TrnGenerationApi__BaseAddress="${{ env.INTEGRATIONTESTS_BUILDENVTRNGENERATIONAPIBASEADDRESS }}"
          -e TrnGenerationApi__ApiKey="${{ env.INTEGRATIONTESTS_BUILDENVTRNGENERATIONAPIAPIKEY }}"
          -e ConnectionStrings__DefaultConnection="Host=localhost;Username=postgres;Password=qtapi;Database=qtapi"
          -e DqtReporting__ReportingDbConnectionString="Data Source=(local); Initial Catalog=${{ env.MSSQL_DB }}; User=sa; Password=${{ env.MSSQL_PASSWORD }}; TrustServerCertificate=True"
          ${{ steps.get_test_filter.outputs.filter_arg }}

  validate_terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.10

    - name: Check formatting
      run: terraform fmt -check -diff
      working-directory: terraform

    - name: Validate
      run: |
        terraform init -backend=false
        terraform validate -no-color
      working-directory: terraform

    - name: Lint
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tflint_rulesets: azurerm
        working_directory: terraform
      continue-on-error: true  # temporary- we're getting sporadic 503 errors here in action setup

  package:
    name: Package application
    needs: [build, validate_terraform]
    uses: ./.github/workflows/package.yml
    secrets: inherit

  deploy_dev:
    name: Deploy dev environment
    needs: package
    uses: ./.github/workflows/deploy-dev.yml
    with:
      api_docker_image: ${{ needs.package.outputs.api_docker_image }}
    secrets: inherit

  sync_api_specs:
    name: Sync API specs
    needs: deploy_dev
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: extractions/setup-just@v1

    - name: Generate specs
      run: just sync-api-specs ${{ needs.deploy_dev.outputs.api_url }}

    - name: Verify specs
      run: |
        git add docs/api-specs
        git diff --cached --quiet docs/api-specs || (
          echo "::error ::API specs are stale; run Sync-ApiSpecs.ps1"
          exit 1
        )
