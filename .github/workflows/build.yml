name: Build

on:
  push:
    branches:
    - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
    - main
  workflow_dispatch:
    inputs:
      deploy_to_prod:
        type: boolean
        description: 'Deploy to production'
        default: false

env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

  build:
    name: Build & test
    needs: [setup]
    runs-on: ubuntu-latest
    concurrency: build

    outputs:
      docker_image: ${{ steps.image.outputs.tag }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: dqt
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Lint
      run: |
        #https://github.com/dotnet/format/issues/1433
        dotnet tool install -g dotnet-format --version "6.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json
        dotnet-format --verify-no-changes

    - name: Build
      run: dotnet build --configuration Release

    - name: Test
      id: test
      run: dotnet test tests/DqtApi.Tests --configuration Release --no-build --logger trx
      if: github.event_name == 'pull_request'
      env:
        IntegrationTests_CrmUrl: ${{ secrets.INTEGRATIONTESTS_CRMURL }}
        IntegrationTests_CrmClientId: ${{ secrets.INTEGRATIONTESTS_CRMCLIENTID }}
        IntegrationTests_CrmClientSecret: ${{ secrets.INTEGRATIONTESTS_CRMCLIENTSECRET }}
        IntegrationTests_BuildEnvLockBlobUri: ${{ secrets.INTEGRATIONTESTS_BUILDENVLOCKBLOBURI }}
        IntegrationTests_BuildEnvLockBlobSasToken: ${{ secrets.INTEGRATIONTESTS_BUILDENVLOCKBLOBSASTOKEN }}
        ConnectionStrings__DefaultConnection: "Host=localhost;Username=postgres;Password=${{ secrets.POSTGRES_PASSWORD }};Database=dqt"

    - name: Test report
      uses: dorny/test-reporter@v1
      if: always() && github.event_name == 'pull_request'
      with:
        name: Test results
        path: "**/*.trx"
        reporter: dotnet-trx

    # TODO Use migration bundles when https://github.com/dotnet/efcore/issues/25555 is fixed
    - name: Generate migrations artifact
      run: |
        mkdir migrations
        migrations_file=migrations/script.sql

        dotnet tool install --global dotnet-ef
        dotnet ef migrations script --idempotent --output $migrations_file --configuration Release --project src/DqtApi/DqtApi.csproj --no-build

        # Remove the BOM
        sed -i $'1s/^\uFEFF//' $migrations_file

        # Ensure any errors return a non-zero exit code when migrations are applied
        echo "$(echo "\set ON_ERROR_STOP true"; echo ""; cat $migrations_file)" > $migrations_file

    - name: Publish migrations
      uses: actions/upload-artifact@v3
      with:
        name: migrations
        path: migrations

    - name: Publish
      run: dotnet publish --configuration Release --no-build src/DqtApi/DqtApi.csproj

    - name: Docker image tag
      id: image
      run: |
        echo ::set-output name=tag::$CONTAINER_REGISTRY/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]'):$GITHUB_SHA

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker build & push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.image.outputs.tag }}
        build-args: |
          GIT_SHA=${{ github.sha }}

  validate_terraform:
    name: Validate Terraform
    needs: [setup]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.10

    - name: Check formatting
      run: terraform fmt -check
      working-directory: terraform

    - name: Validate
      run: |
        terraform init -backend=false
        terraform validate -no-color
      working-directory: terraform

    - name: Lint
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tflint_rulesets: azurerm
        working_directory: terraform
      continue-on-error: true  # temporary- we're getting sporadic 503 errors here in action setup

  deploy_dev:
    name: Deploy to dev environment
    needs: [build, validate_terraform]
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_dev

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: dev
        docker_image: ${{ needs.build.outputs.docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: dev.tfvars.json
        terraform_backend_vars: dev.backend.tfvars

  sync_api_specs:
    name: Sync API specs
    needs: deploy_dev
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Generate specs
      shell: pwsh
      run: ./Sync-ApiSpecs.ps1 ${{ needs.deploy_dev.outputs.environment_url }}

    - name: Verify specs
      run: |
        git add docs/api-specs
        git diff --cached --quiet docs/api-specs || (
          echo "::error ::API specs are stale; run Sync-ApiSpecs.ps1"
          exit 1
        )

  zap_scan:
    name: OWASP ZAP API scan
    needs: deploy_dev
    runs-on: ubuntu-latest
    concurrency: deploy_dev
    strategy:
      matrix:
        version: [v1, v2]

    steps:
    - uses: actions/checkout@v3

    - name: Create config file
      run: |
        echo "replacer.full_list(0).description=auth1" >> options.prop
        echo "replacer.full_list(0).enabled=true" >> options.prop
        echo "replacer.full_list(0).matchtype=REQ_HEADER" >> options.prop
        echo "replacer.full_list(0).matchstr=Authorization" >> options.prop
        echo "replacer.full_list(0).regex=false" >> options.prop
        echo "replacer.full_list(0).replacement=Bearer ${{ needs.deploy_dev.outputs.test_user_api_key }}" >> options.prop

    - uses: zaproxy/action-api-scan@v0.1.1
      with:
        target: ${{ needs.deploy_dev.outputs.environment_url }}swagger/${{ matrix.version }}/swagger.json
        format: openapi
        allow_issue_writing: false
        fail_action: true
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-z "-configFile /zap/wrk/options.prop"'

  deploy_test:
    name: Deploy to test environment
    needs: [build, validate_terraform]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: test
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_test

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: test
        docker_image: ${{ needs.build.outputs.docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: test.tfvars.json
        terraform_backend_vars: test.backend.tfvars

  deploy_preprod:
    name: Deploy to pre-production environment
    needs: [build, deploy_test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: pre-production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_preprod

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: pre-production
        docker_image: ${{ needs.build.outputs.docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: pre-production.tfvars.json
        terraform_backend_vars: pre-production.backend.tfvars

  deploy_prod:
    name: Deploy to production environment
    needs: [build, deploy_preprod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_prod == 'true')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_prod

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: production
        docker_image: ${{ needs.build.outputs.docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: production.tfvars.json
        terraform_backend_vars: production.backend.tfvars
        skip_functional_tests: true
