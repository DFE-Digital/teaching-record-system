name: Build

on:
  push:
    branches:
    - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
    - main
  workflow_dispatch:
    inputs:
      deploy_to_production:
        type: boolean
        description: 'Deploy to production'
        default: false
      skip_dataverse_tests:
        type: boolean
        description: 'Skip the CRM Dataverse tests'
        default: false

env:
  CONTAINER_REGISTRY: ghcr.io

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  checks: write
  deployments: write
  packages: write
  pull-requests: write

jobs:
  build:
    name: Build & test
    runs-on: ubuntu-latest
    concurrency: build

    outputs:
      api_docker_image: ${{ steps.image_tags.outputs.api_tag }}

    env:
      MSSQL_DB: dqtreports
      MSSQL_PASSWORD: SuperS3cretPassw0rd

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: qtapi
          POSTGRES_DB: qtapi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ env.MSSQL_PASSWORD }}
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
          --health-interval 60s
          --health-timeout 30s
          --health-start-period 20s
          --health-retries 3

    steps:
    - uses: actions/checkout@v3

    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi
        echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_ENV
      env:
        TFVARS: dev.tfvars.json
      shell: bash
      working-directory: terraform

    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    - name: Restore
      run: dotnet restore
      working-directory: QualifiedTeachersApi

    - name: Lint
      if: github.event_name != 'push'
      run: |
        INCLUDE_ARG=""
        if [ "$EVENT_NAME" == "pull_request" ]; then
          git fetch origin main --quiet --depth=1
          CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA | { grep '^QualifiedTeachersApi.*\.cs$' || true; })

          if [ "$CHANGED_FILES" == "" ]; then
            echo "::warning::No changes to lint"
            exit 0
          fi

          INCLUDE_ARG="--include $(echo "$CHANGED_FILES" | tr '\n' ' ')"
          echo "::notice::Linting changed files only"
        else
          echo "::notice::Linting entire codebase"
        fi

        dotnet tool install -g dotnet-format --version "7.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json >/dev/null
        dotnet-format --no-restore --verify-no-changes $INCLUDE_ARG
      env:
        EVENT_NAME: ${{ github.event_name }}
      working-directory: QualifiedTeachersApi

    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: QualifiedTeachersApi

    - uses: Azure/get-keyvault-secrets@v1
      id: get_secrets
      with:
        keyvault: ${{ env.key_vault_name }}
        secrets: 'INTEGRATION-TEST-CONFIG'

    - name: Set secret environment variables
      id: set_outputs
      run: |
        SECRET_KEYS=($(jq -r <<< "$SECRETS_JSON" | jq -r 'keys | @sh' | tr -d \'))
        for s in "${SECRET_KEYS[@]}"
        do
          SECRET=$(jq -r .${s} <<< "$SECRETS_JSON")
          echo "::add-mask::$SECRET"
          echo ${s}=$SECRET >> $GITHUB_ENV
        done
      env:
        SECRETS_JSON: ${{ steps.get_secrets.outputs.INTEGRATION-TEST-CONFIG }}
      shell: bash

    - name: Determine test filter
      id: get_test_filter
      if: github.event_name != 'push'
      run: |
        # If no CRM integration files (or their tests) have been changed in this PR then skip Dataverse tests
        if [ "$EVENT_NAME" == "pull_request" ]; then
          git fetch origin main --quiet --depth=1
          CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA)
          if [[ $(echo "$CHANGED_FILES" | grep -EL "DataStore/Crm|Tests/DataverseIntegration") ]]; then
            SKIP_DATAVERSE_TESTS="true"
          fi
        fi

        if [ "$SKIP_DATAVERSE_TESTS" == "true" ]; then
          echo "::warning::Skipping DataverseAdapter tests"
          echo filter_arg='--filter "FullyQualifiedName!~QualifiedTeachersApi.Tests.DataverseIntegration"' >> $GITHUB_OUTPUT
        fi
      env:
        EVENT_NAME: ${{ github.event_name }}
        SKIP_DATAVERSE_TESTS: ${{ github.event.inputs.skip_dataverse_tests }}
      shell: bash

    - name: Create test reporting database
      run: docker exec $(docker ps --latest --quiet) /opt/mssql-tools/bin/sqlcmd -U "sa" -P "$MSSQL_PASSWORD" -Q "create database $MSSQL_DB; alter database $MSSQL_DB set ALLOW_SNAPSHOT_ISOLATION on;"

    - name: Tests
      uses: ./.github/workflows/actions/test
      if: github.event_name != 'push'
      with:
        test_project_path: QualifiedTeachersApi/tests/QualifiedTeachersApi.Tests
        report_name: "Test results"
        dotnet_test_args: >-
          -e CrmUrl="${{ env.INTEGRATIONTESTS_CRMURL }}"
          -e CrmClientId="${{ env.INTEGRATIONTESTS_CRMCLIENTID }}"
          -e CrmClientSecret="${{ env.INTEGRATIONTESTS_CRMCLIENTSECRET }}"
          -e BuildEnvLockBlobUri="${{ env.INTEGRATIONTESTS_BUILDENVLOCKBLOBURI }}"
          -e BuildEnvLockBlobSasToken="${{ env.INTEGRATIONTESTS_BUILDENVLOCKBLOBSASTOKEN }}"
          -e TrnGenerationApi__BaseAddress="${{ env.INTEGRATIONTESTS_BUILDENVTRNGENERATIONAPIBASEADDRESS }}"
          -e TrnGenerationApi__ApiKey="${{ env.INTEGRATIONTESTS_BUILDENVTRNGENERATIONAPIAPIKEY }}"
          -e ConnectionStrings__DefaultConnection="Host=localhost;Username=postgres;Password=qtapi;Database=qtapi"
          -e DqtReporting__ReportingDbConnectionString="Data Source=(local); Initial Catalog=${{ env.MSSQL_DB }}; User=sa; Password=${{ env.MSSQL_PASSWORD }}; TrustServerCertificate=True"
          ${{ steps.get_test_filter.outputs.filter_arg }}

    - name: Publish
      run: |
        dotnet publish --configuration Release --no-build src/QualifiedTeachersApi/QualifiedTeachersApi.csproj
        dotnet publish --configuration Release --no-build src/QtCli/QtCli.csproj
      working-directory: QualifiedTeachersApi

    - name: Get Docker image tags
      id: image_tags
      run: |
        echo "api_tag=$CONTAINER_REGISTRY/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]'):api-$GITHUB_SHA" >> $GITHUB_OUTPUT

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: API Docker build & push
      uses: docker/build-push-action@v4
      with:
        context: QualifiedTeachersApi/
        file: QualifiedTeachersApi/src/QualifiedTeachersApi/Dockerfile
        push: true
        tags: ${{ steps.image_tags.outputs.api_tag }}
        build-args: |
          GIT_SHA=${{ github.sha }}

  validate_terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.10

    - name: Check formatting
      run: terraform fmt -check -diff
      working-directory: terraform

    - name: Validate
      run: |
        terraform init -backend=false
        terraform validate -no-color
      working-directory: terraform

    - name: Lint
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tflint_rulesets: azurerm
        working_directory: terraform
      continue-on-error: true  # temporary- we're getting sporadic 503 errors here in action setup

  deploy_dev:
    name: Deploy to dev environment
    needs: [build, validate_terraform]
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_dev

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: dev
        api_docker_image: ${{ needs.build.outputs.api_docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: dev.tfvars.json
        terraform_backend_vars: dev.backend.tfvars

  sync_api_specs:
    name: Sync API specs
    needs: deploy_dev
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Generate specs
      shell: pwsh
      run: ./Sync-ApiSpecs.ps1 ${{ needs.deploy_dev.outputs.environment_url }}

    - name: Verify specs
      run: |
        git add docs/api-specs
        git diff --cached --quiet docs/api-specs || (
          echo "::error ::API specs are stale; run Sync-ApiSpecs.ps1"
          exit 1
        )

#  zap_scan:
#    name: OWASP ZAP API scan
#    needs: deploy_dev
#    runs-on: ubuntu-latest
#    concurrency: deploy_dev
#    strategy:
#      matrix:
#        version: [v1, v2]
#
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Create config file
#      run: |
#        echo "replacer.full_list(0).description=auth1" >> options.prop
#        echo "replacer.full_list(0).enabled=true" >> options.prop
#        echo "replacer.full_list(0).matchtype=REQ_HEADER" >> options.prop
#        echo "replacer.full_list(0).matchstr=Authorization" >> options.prop
#        echo "replacer.full_list(0).regex=false" >> options.prop
#        echo "replacer.full_list(0).replacement=Bearer ${{ needs.deploy_dev.outputs.test_user_api_key }}" >> options.prop
#
#    - uses: zaproxy/action-api-scan@v0.1.1
#      with:
#        target: ${{ needs.deploy_dev.outputs.environment_url }}swagger/${{ matrix.version }}/swagger.json
#        format: openapi
#        allow_issue_writing: false
#        fail_action: true
#        rules_file_name: '.zap/rules.tsv'
#        cmd_options: '-z "-configFile /zap/wrk/options.prop"'

  deploy_test:
    name: Deploy to test environment
    needs: [build, validate_terraform]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: test
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_test

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: test
        api_docker_image: ${{ needs.build.outputs.api_docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: test.tfvars.json
        terraform_backend_vars: test.backend.tfvars

  deploy_preprod:
    name: Deploy to pre-production environment
    needs: [build, deploy_test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: pre-production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_preprod

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: pre-production
        api_docker_image: ${{ needs.build.outputs.api_docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: pre-production.tfvars.json
        terraform_backend_vars: pre-production.backend.tfvars

  deploy_prod:
    name: Deploy to production environment
    needs: [build, deploy_preprod]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'true')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_prod

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: production
        api_docker_image: ${{ needs.build.outputs.api_docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: production.tfvars.json
        terraform_backend_vars: production.backend.tfvars
