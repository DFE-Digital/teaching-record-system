name: Deploy PAAS environment

inputs:
  environment_name:
    description: 'The name of the environment'
    required: true
  docker_image:
    description: 'The Docker image to deploy to the environment'
    required: true
  azure_credentials:
    description: 'JSON object containing a service principal that can read from Azure Key Vault'
    required: true
  terraform_vars:
    description: 'Path to the tfvars file for the environment'
    required: true
  terraform_backend_vars:
    description: 'Path to the backend tfvars file for the environment'
    required: true
  skip_functional_tests:
    default: false

outputs:
  environment_url:
    description: 'The base URL for the deployed environment'
    value: ${{ steps.terraform.outputs.url }}
  test_user_api_key:
    description: 'An API key of a client for running tests'
    value: ${{ steps.get_secrets.outputs.TEST-API-KEY }}

runs:
  using: composite

  steps:
    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        PAAS_SPACE=$(jq -r '.paas_space' $TFVARS)
        RESOURCE_GROUP_NAME=$(jq -r '.resource_group_name' $TFVARS)
        STORAGE_ACCOUNT_NAME=$(jq -r '.storage_account_name' $TFVARS)

        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi

        if [ -z "$PAAS_SPACE" ]; then
          echo "::error ::Failed to extract paas_space from $TFVARS"
          exit 1
        fi

        if [ -z "$RESOURCE_GROUP_NAME" ]; then
          echo "::error ::Failed to extract resource_group_name from $TFVARS"
          exit 1
        fi

        if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
          echo "::error ::Failed to extract storage_account_name from $TFVARS"
          exit 1
        fi

        echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_ENV
        echo "paas_space=$PAAS_SPACE" >> $GITHUB_ENV
        echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
      shell: bash
      env:
        TFVARS: ${{ inputs.terraform_vars }}
      working-directory: terraform

    - name: Extract version
      id: get_version
      run: |
        API_VERSION=${DOCKER_IMAGE##*:}
        echo "api_version=$API_VERSION" >> $GITHUB_ENV
      env:
        DOCKER_IMAGE: ${{ inputs.docker_image }}
      shell: bash

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    # get TFSTATE-CONTAINER-ACCESS-KEY
    - run: |
        TFSTATE_CONTAINER_ACCESS_KEY="$(az storage account keys list -g ${{ env.resource_group_name }} -n ${{ env.storage_account_name }} | jq -r '.[0].value')"
        echo "::add-mask::$TFSTATE_CONTAINER_ACCESS_KEY"
        echo "TFSTATE_CONTAINER_ACCESS_KEY=$TFSTATE_CONTAINER_ACCESS_KEY" >> $GITHUB_ENV
      shell: bash

    - uses: Azure/get-keyvault-secrets@v1
      id: get_secrets
      with:
        keyvault: ${{ env.key_vault_name }}
        secrets: 'TEST-API-KEY,PAAS-USER,PAAS-PASSWORD'

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10
        terraform_wrapper: false

    - name: Download migrations
      uses: actions/download-artifact@v2
      with:
        name: migrations
        path: migrations

    - name: Install CF CLI
      shell: bash
      run: |
        curl -sL ${CF_CLI_DOWNLOAD_URL} --user-agent "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.3 Safari/605.1.15" | sudo tar -zx -C /usr/local/bin

        cf install-plugin conduit -f

        cf api ${CF_API_URL}
        cf auth
        cf target -o ${CF_ORG_NAME} -s ${CF_SPACE_NAME}
      env:
        CF_USERNAME: ${{ steps.get_secrets.outputs.PAAS-USER }}
        CF_PASSWORD: ${{ steps.get_secrets.outputs.PAAS-PASSWORD }}
        CF_SPACE_NAME: ${{ env.paas_space }}
        CF_API_URL: https://api.london.cloud.service.gov.uk
        CF_ORG_NAME: dfe
        CF_CLI_DOWNLOAD_URL: https://packages.cloudfoundry.org/stable?release=linux64-binary&source=github&version=v7

    - name: Set environment variables
      shell: bash
      run: |
        echo "MIGRATIONS_FILE=$(realpath ./migrations/script.sql)" >> $GITHUB_ENV

    - name: Terraform
      id: terraform
      run: |
        make ci ${{ inputs.environment_name }} terraform-apply
        cd terraform
        echo "url=https://$(terraform output -raw api_fqdn)/" >> $GITHUB_OUTPUT
      env:
        ARM_ACCESS_KEY: ${{ env.TFSTATE_CONTAINER_ACCESS_KEY }}
        TF_VAR_azure_sp_credentials_json: ${{ inputs.azure_credentials }}
        TF_VAR_api_docker_image: ${{ inputs.docker_image }}
        TF_VAR_api_app_version: ${{ env.api_version }}
        TF_VAR_migrations_file: ${{ env.MIGRATIONS_FILE }}
      shell: bash

    - uses: ./.github/workflows/actions/functional-tests
      if: inputs.skip_functional_tests != 'true'
      with:
        environment_name: ${{ inputs.environment_name }}
        azure_credentials: ${{ inputs.azure_credentials }}
        base_url: ${{ steps.terraform.outputs.url }}
        key_vault_name: ${{ env.key_vault_name }}
