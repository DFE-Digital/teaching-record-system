name: Deploy PAAS environment

inputs:
  environment_name:
    description: 'The name of the environment'
    required: true
  api_docker_image:
    description: 'The API Docker image to deploy to the environment'
    required: true
  azure_credentials:
    description: 'JSON object containing a service principal that can read from Azure Key Vault'
    required: true
  terraform_vars:
    description: 'Name of the tfvars file for the environment'
    required: true
  terraform_backend_vars:
    description: 'Name of the backend tfvars file for the environment'
    required: true

outputs:
  api_url:
    description: 'The base URL for the deployed environment'
    value: ${{ steps.terraform.outputs.api_url }}

runs:
  using: composite

  steps:
    - name: Extract configuration from tfvars
      id: config
      run: |
        RESOURCE_GROUP_NAME=$(jq -r '.resource_group_name' $TFVARS)
        STORAGE_ACCOUNT_NAME=$(jq -r '.storage_account_name' $TFVARS)

        if [ -z "$RESOURCE_GROUP_NAME" ]; then
          echo "::error ::Failed to extract resource_group_name from $TFVARS"
          exit 1
        fi

        if [ -z "$STORAGE_ACCOUNT_NAME" ]; then
          echo "::error ::Failed to extract storage_account_name from $TFVARS"
          exit 1
        fi

        echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
      shell: bash
      env:
        TFVARS: ${{ inputs.terraform_vars }}
      working-directory: terraform/paas/workspace_variables

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    - run: |
        TFSTATE_CONTAINER_ACCESS_KEY="$(az storage account keys list -g ${{ env.resource_group_name }} -n ${{ env.storage_account_name }} | jq -r '.[0].value')"
        echo "::add-mask::$TFSTATE_CONTAINER_ACCESS_KEY"
        echo "TFSTATE_CONTAINER_ACCESS_KEY=$TFSTATE_CONTAINER_ACCESS_KEY" >> $GITHUB_ENV
      shell: bash

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Terraform
      id: terraform
      run: |
        make ci ${{ inputs.environment_name }} terraform-apply
        (cd terraform/paas && echo "api_url=https://$(terraform output -raw api_fqdn)/" >> $GITHUB_OUTPUT)
      env:
        ARM_ACCESS_KEY: ${{ env.TFSTATE_CONTAINER_ACCESS_KEY }}
        TF_VAR_azure_sp_credentials_json: ${{ inputs.azure_credentials }}
        TF_VAR_api_docker_image: ${{ inputs.api_docker_image }}
      shell: bash
